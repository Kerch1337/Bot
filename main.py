import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from dotenv import load_dotenv
from pathlib import Path
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
#load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = [DB_USER, DB_PASSWORD, DB_HOST, DB_PORT, DB_NAME]
if None in required_vars:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ë–î!")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
SQLALCHEMY_DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, unique=True)
    username = Column(String)
    full_name = Column(String)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–º–æ—â—å")],
            [KeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="–û–∫–∞–∫")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ")
    user = message.from_user
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, "+ user.first_name +"! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_text = message.text.lower()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_text}")

    if user_text.lower() == "–ø—Ä–∏–≤–µ—Ç":
        await message.answer("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üòä")
    elif user_text.lower() == "–ø–æ–º–æ—â—å":
        await message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    elif user_text.lower() == "–º–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        user = message.from_user
        await message.answer(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"ID: {user.id}\n"
            f"–ò–º—è: {user.first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ—Ç'}\n"
            f"Username: @{user.username}"
        )
    elif user_text.lower() == "–æ–∫–∞–∫":
        try:
            # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            image_path = Path(__file__).parent / "images" / "okak.jpg"
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not image_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
            photo = FSInputFile(image_path)
        
            await message.answer_photo(
                photo,
                caption="–æ–∫–∞–∫"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üò¢")
    else:
        await message.answer(user_text[::-1])

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    dp.run_polling(bot)