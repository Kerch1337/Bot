from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession
from database.model import User, Message, UserRole
from keyboards.reply import get_main_keyboard
from utils.logger import logger

router = Router()

async def get_or_create_user(session: AsyncSession, tg_user: types.User) -> User:
    try:
        result = await session.execute(
            select(User).where(User.telegram_id == tg_user.id)
        )
        user = result.scalar()

        if not user:
            user = User(
                telegram_id=tg_user.id,
                first_name=tg_user.first_name,
                username=tg_user.username,
                last_name=tg_user.last_name,
                role=UserRole.USER
            )
            session.add(user)
            await session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} ({tg_user.full_name})")
        return user
    except IntegrityError as e:
        await session.rollback()
        result = await session.execute(
            select(User).where(User.telegram_id == tg_user.id)
        )
        user = result.scalar()
        if user:
            logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π: {user.id}")
            return user
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        raise

@router.message(Command("start"))
async def start_command(message: types.Message, session: AsyncSession):
    try:
        tg_user = message.from_user
        user = await get_or_create_user(session, tg_user)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.full_name} (id={user.id}) –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ")
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {tg_user.first_name}! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("re_chat"))
async def re_chat_command(message: types.Message, session: AsyncSession):
    try:
        args = message.text.split()[1:]
        target_id = None

        if args:
            try:
                target_id = int(args[0])
            except ValueError:
                await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return

        current_user = message.from_user
        if not target_id:
            target_id = current_user.id

        result = await session.execute(select(User).where(User.telegram_id == target_id))
        user = result.scalar()

        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        result = await session.execute(
            select(Message)
            .where(Message.sender_id == user.id)
            .order_by(Message.sent_at.desc())
            .limit(50)
        )
        messages = result.scalars().all()

        if not messages:
            response = "üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏"
        else:
            history = []
            for msg in messages:
                time = msg.sent_at.strftime("%d.%m %H:%M")
                text = msg.text if len(msg.text) < 100 else msg.text[:97] + "..."
                history.append(f"‚è±Ô∏è <b>{time}</b>\n{text}")

            username = user.username or f"{user.first_name} {user.last_name or ''}".strip()
            response = (
                f"üìú –ò—Å—Ç–æ—Ä–∏—è <b>{username}</b> (ID: {user.telegram_id}):\n\n" +
                "\n\n".join(history)
            )

        await message.answer(
            response,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /re_chat: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
