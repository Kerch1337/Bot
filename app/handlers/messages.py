from aiogram import Router, F
from aiogram.types import FSInputFile, Message
from pathlib import Path
from utils.logger import logger
from datetime import datetime
from database.model import Message as MessageModel
from sqlalchemy.ext.asyncio import AsyncSession
from services.openai_client import chat_with_gpt
from .commands import get_or_create_user
from services.openai_client import get_or_create_dialogue

router = Router()

@router.message(F.text)
async def handle_and_save_message(message: Message, session: AsyncSession):
    tg_user = message.from_user
    user = await get_or_create_user(session, tg_user)
    user_text = message.text.strip().lower()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        dialogue = await get_or_create_dialogue(session, user)

        new_msg = MessageModel(
            text=message.text,
            sender_id=user.id,
            dialogue=dialogue,
            sent_at=datetime.utcnow()
        )
        session.add(new_msg)
        await session.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {tg_user.full_name} (id={user.id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await session.rollback()

    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if user_text == "–ø—Ä–∏–≤–µ—Ç":
        await message.answer("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üòä")
    elif user_text == "–ø–æ–º–æ—â—å":
        await message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n/re_chat - –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    elif user_text == "–º–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        await message.answer(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"ID: {tg_user.id}\n"
            f"–ò–º—è: {tg_user.first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {tg_user.last_name or '–Ω–µ—Ç'}\n"
            f"Username: @{tg_user.username}"
        )
    elif user_text == "–æ–∫–∞–∫":
        try:
            image_path = Path(__file__).parent.parent / "images" / "okak.jpg"
            if not image_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            photo = FSInputFile(image_path)
            await message.answer_photo(photo, caption="–æ–∫–∞–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üò¢")
    else:
        # GPT-–æ—Ç–≤–µ—Ç
        try:
            reply = await chat_with_gpt(session, user, message.text)
            await message.answer(reply)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç GPT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_user.full_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {str(e)}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
